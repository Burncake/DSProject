syntax = "proto3";
package chat;

// --- Core models ---
message User { string id = 1; string display_name = 2; }
message Group { string name = 1; repeated string member_ids = 2; }

// --- Control RPCs (unary) ---
message RegisterRequest { string display_name = 1; }
message RegisterResponse { string user_id = 1; }

message LoginRequest { 
    string display_name = 1; 
}
message LoginResponse { 
    bool success = 1;
    string user_id = 2;
    string error_message = 3;
}

message SearchUsersRequest { string query = 1; }
message SearchUsersResponse { repeated User users = 1; }

message ListGroupsRequest {}
message ListGroupsResponse { repeated Group groups = 1; }

message ListUserGroupsRequest { string user_id = 1; }
message ListUserGroupsResponse { repeated Group groups = 1; }

message CreateGroupRequest {
    string group_name = 1;
    string creator_user_id = 2;
}

message CreateGroupResponse {
    bool success = 1;
    string error_message = 2;
}

message JoinGroupRequest {
    string group_name = 1;
    string user_id = 2;
}

message JoinGroupResponse {
    bool success = 1;
    string error_message = 2;
}

message GetMessagesRequest {
    string user_id = 1;
    string chat_id = 2;  // user_id for DM or group_name for group
    bool is_group = 3;
    int32 limit = 4;  // optional limit (default 50)
}

message GetMessagesResponse {
    repeated ChatEnvelope messages = 1;
}

message GetUserGroupsRequest {
    string user_id = 1;
}

message GetUserGroupsResponse {
    repeated Group groups = 1;
}

// --- Chat stream (bidi) ---
enum EventType { UNKNOWN = 0; SEND_DM = 1; SEND_GROUP = 2; SYSTEM = 3; ACK = 4; }

message ChatEnvelope {
  EventType type = 1;
  string from_user_id = 2;
  string to_user_id = 3;      // for DM (future step)
  string group_id = 4;        // for groups (future step)
  string message_id = 5;
  string text = 6;
  int64  sent_ts = 7;         // unix ms
}

service ChatService {
  rpc RegisterUser(RegisterRequest) returns (RegisterResponse);
  rpc LoginUser(LoginRequest) returns (LoginResponse);
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse);
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);
  rpc JoinGroup(JoinGroupRequest) returns (JoinGroupResponse);
  // List all groups
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse);
  // List groups for a specific user
  rpc ListUserGroups(ListUserGroupsRequest) returns (ListUserGroupsResponse);
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
  rpc GetUserGroups(GetUserGroupsRequest) returns (GetUserGroupsResponse);
  rpc OpenStream(stream ChatEnvelope) returns (stream ChatEnvelope);
}
